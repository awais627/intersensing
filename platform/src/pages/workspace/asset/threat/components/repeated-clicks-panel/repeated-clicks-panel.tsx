import { GSection } from 'components/basic-blocks'
import { GNewTooltip } from 'components/basic-blocks/g-tooltip/g-new-tooltip'
import { BarChart } from 'components/charts/bar-chart'
import { RiQuestionLine } from 'react-icons/ri'
import { TopOffendersResponse } from '../../../../../../services/telemetry'

const COLORS = {
  catastrophic: '#B91C1C', // red-700
  critical:     '#F97316', // orange-500
  high:         '#FBBF24', // amber-400
  medium:       '#60A5FA', // blue-400
  low:          '#22C55E', // green-500
}

const SEVERITIES = ['catastrophic', 'critical', 'high', 'medium', 'low'] as const
const keys = [...SEVERITIES] 

export const RepeatedClicksPanel = ({ data }: { data: TopOffendersResponse | null }) => {
	const chartData = data?.topMachines?.map((machine) => ({
	number: machine.machineId,
	...Object.fromEntries(SEVERITIES.flatMap((s) => [
		[s, machine[s] ?? 0],
		[`color_${s}`, COLORS[s]],
	])),
	})) ?? []

  return (
    <GSection containerClassName="-mb-6" loading={false}>
      <div className="h-full relative">
        <div className="flex items-center justify-between pb-6">
          <div className="text-t-default flex flex-row items-center gap-x-1">
            <span className="font-bold text-xl">Top Machines Alerts</span>
            <GNewTooltip content="Breakdown of how many alerts each machine generated by severity">
              <RiQuestionLine className="w-3 h-3 text-t-default" />
            </GNewTooltip>
          </div>
        </div>

        {/* Legend */}
        <div className="flex items-center gap-x-4 mb-2 text-xs text-t-muted">
          {SEVERITIES.map((s) => (
            <div key={s} className="flex items-center gap-x-1">
              <div className="w-2.5 h-2.5 rounded-sm" style={{ backgroundColor: COLORS[s] }} />
              <span className="capitalize">{s}</span>
            </div>
          ))}
        </div>

        <div className="flex flex-col gap-2">
          <div className="mb-4">
            <BarChart
              data={chartData}
              index="number"
              layout="vertical"
              containerClassName="h-[294px]"
              leftPadding={40}
              barPadding={0.4}
              hideAxisLeft={false}
              keys={keys}
              stacked
              tooltip={({ number, ...severities }) => (
                <div>
                  <span className="font-bold">{number}</span>
                  <ul className="mt-1 space-y-0.5 text-xs">
                    {SEVERITIES.map((s) => (
                      <li key={s} className="flex justify-between gap-x-2">
                        <span className="capitalize">{s}:</span>
                        <span className="font-semibold">
                          {Number(severities[s]).toLocaleString()}
                        </span>
                      </li>
                    ))}
                    <li className="flex justify-between gap-x-2 border-t border-t-slate-200 mt-1 pt-1">
                      <span>Total:</span>
                      <span className="font-semibold">
                        {SEVERITIES.reduce((acc, key) => acc + severities[key], 0).toLocaleString()}
                      </span>
                    </li>
                  </ul>
                </div>
              )}
            />
          </div>
        </div>

      </div>
    </GSection>
  )
}
